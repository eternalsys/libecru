// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testFreelances(t *testing.T) {
	t.Parallel()

	query := Freelances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testFreelancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFreelancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Freelances().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFreelancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FreelanceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testFreelancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := FreelanceExists(ctx, tx, o.MailAddress)
	if err != nil {
		t.Errorf("Unable to check if Freelance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected FreelanceExists to return true, but got false.")
	}
}

func testFreelancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	freelanceFound, err := FindFreelance(ctx, tx, o.MailAddress)
	if err != nil {
		t.Error(err)
	}

	if freelanceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testFreelancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Freelances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testFreelancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Freelances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testFreelancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	freelanceOne := &Freelance{}
	freelanceTwo := &Freelance{}
	if err = randomize.Struct(seed, freelanceOne, freelanceDBTypes, false, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}
	if err = randomize.Struct(seed, freelanceTwo, freelanceDBTypes, false, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = freelanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = freelanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Freelances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testFreelancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	freelanceOne := &Freelance{}
	freelanceTwo := &Freelance{}
	if err = randomize.Struct(seed, freelanceOne, freelanceDBTypes, false, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}
	if err = randomize.Struct(seed, freelanceTwo, freelanceDBTypes, false, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = freelanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = freelanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func freelanceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Freelance) error {
	*o = Freelance{}
	return nil
}

func freelanceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Freelance) error {
	*o = Freelance{}
	return nil
}

func freelanceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Freelance) error {
	*o = Freelance{}
	return nil
}

func freelanceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Freelance) error {
	*o = Freelance{}
	return nil
}

func freelanceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Freelance) error {
	*o = Freelance{}
	return nil
}

func freelanceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Freelance) error {
	*o = Freelance{}
	return nil
}

func freelanceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Freelance) error {
	*o = Freelance{}
	return nil
}

func freelanceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Freelance) error {
	*o = Freelance{}
	return nil
}

func freelanceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Freelance) error {
	*o = Freelance{}
	return nil
}

func testFreelancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Freelance{}
	o := &Freelance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, freelanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Freelance object: %s", err)
	}

	AddFreelanceHook(boil.BeforeInsertHook, freelanceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	freelanceBeforeInsertHooks = []FreelanceHook{}

	AddFreelanceHook(boil.AfterInsertHook, freelanceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	freelanceAfterInsertHooks = []FreelanceHook{}

	AddFreelanceHook(boil.AfterSelectHook, freelanceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	freelanceAfterSelectHooks = []FreelanceHook{}

	AddFreelanceHook(boil.BeforeUpdateHook, freelanceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	freelanceBeforeUpdateHooks = []FreelanceHook{}

	AddFreelanceHook(boil.AfterUpdateHook, freelanceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	freelanceAfterUpdateHooks = []FreelanceHook{}

	AddFreelanceHook(boil.BeforeDeleteHook, freelanceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	freelanceBeforeDeleteHooks = []FreelanceHook{}

	AddFreelanceHook(boil.AfterDeleteHook, freelanceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	freelanceAfterDeleteHooks = []FreelanceHook{}

	AddFreelanceHook(boil.BeforeUpsertHook, freelanceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	freelanceBeforeUpsertHooks = []FreelanceHook{}

	AddFreelanceHook(boil.AfterUpsertHook, freelanceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	freelanceAfterUpsertHooks = []FreelanceHook{}
}

func testFreelancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFreelancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(freelanceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testFreelancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFreelancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := FreelanceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testFreelancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Freelances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	freelanceDBTypes = map[string]string{`MailAddress`: `varchar`, `LastName`: `varchar`, `FirstName`: `varchar`, `LastNameKana`: `varchar`, `FirstNameKana`: `varchar`, `Age`: `varchar`, `Prefectures`: `varchar`, `TelNumber`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                = bytes.MinRead
)

func testFreelancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(freelancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(freelanceAllColumns) == len(freelancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testFreelancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(freelanceAllColumns) == len(freelancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Freelance{}
	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, freelanceDBTypes, true, freelancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(freelanceAllColumns, freelancePrimaryKeyColumns) {
		fields = freelanceAllColumns
	} else {
		fields = strmangle.SetComplement(
			freelanceAllColumns,
			freelancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := FreelanceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testFreelancesUpsert(t *testing.T) {
	t.Parallel()

	if len(freelanceAllColumns) == len(freelancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLFreelanceUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Freelance{}
	if err = randomize.Struct(seed, &o, freelanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Freelance: %s", err)
	}

	count, err := Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, freelanceDBTypes, false, freelancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Freelance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Freelance: %s", err)
	}

	count, err = Freelances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
